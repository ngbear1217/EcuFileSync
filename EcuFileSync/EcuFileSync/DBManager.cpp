#include "stdafx.h"
#include "DBManager.h"

//#ifdef DEBUG
CString CDBManager::m_strDBIP = "127.0.0.1";
CString CDBManager::m_strDBName = "FLASH_KMM";

//#endif
CDBManager::CDBManager()
	: m_strPort("1433")
	, m_strID("sysuser")
	, m_strPW("sys2012")
{
	 // COM관련 개체 초기화 
	m_pConn = NULL;
///	m_pCmd = NULL;
	m_strMessage = "";

}


CDBManager::~CDBManager()
{
	
	CloseDB();
	//CoUninitialize();
}

BOOL CDBManager::OpenDB(void)
{
	CoInitialize(NULL);
	BOOL bRet = TRUE;
	CString strConn;
	m_pConn.CreateInstance(__uuidof(ADODB::Connection));
	//m_pCmd.CreateInstance(__uuidof(Command));
	try
	{
		GetConnString(strConn);
		m_pConn->Provider = "SQLOLEDB";
		m_pConn->ConnectionString = strConn.GetBuffer(0);
	
		m_pConn->Open("", "", "", ADODB::adConnectUnspecified);
		//m_pCmd->ActiveConnection = m_pConn;
		//m_pCmd->CommandType = adCmdText;
	}
	catch (_com_error &e)
	{
		_bstr_t bstrSource(e.Source());
		_bstr_t bstrDescription(e.Description());
		U_Log("COMMON", "Exception thrown for classes generated by #import");
		U_Log("COMMON", "[%-30s] Error code(%08lX), Meaning(%s), Src(%s), Dst(%s)", __FUNCTION__, e.Error(), e.ErrorMessage(), (LPCTSTR)bstrSource, (LPCTSTR)bstrDescription);
		bRet = FALSE;
	}
	catch (...)
	{
		U_Log("COMMON", "[%-30s] Unhandled exception fired", __FUNCTION__);
		bRet = FALSE;
	}
	return bRet;
}


void CDBManager::CloseDB(void)
{

	/*if (m_pConn)
	{
		m_pConn->Close();
		m_pConn = NULL;
	}*/
	CoUninitialize();

	return;
}
void CDBManager::GetConnString(CString& strConn)
{
	//CString strMachineId;
	char strCurPath[256] = { 0, };
	char buf[256] = { 0, };
	CString strFlashInfoINIPath, strINIPath;

	GetCurrentDirectory(sizeof(strCurPath), strCurPath);
	strINIPath.Format("%s\\%s", strCurPath, INI_PATH);
	



	GetPrivateProfileString("DB_INFO", "DB_IP", "", buf, 15, strINIPath);//strVciId= VCI01,VCI02 ...
	m_strDBIP.Format("%s", buf);
	GetPrivateProfileString("DB_INFO", "DB_NAME", "", buf, 15, strINIPath);//strVciId= VCI01,VCI02 ...
	m_strDBName.Format("%s", buf);

	strConn.Format(_T("Provider=SQLOLEDB;User ID=%s;Password=%s;Data Source=%s;")
		_T("Initial Catalog=%s;Network Address=%s,%s;")
		_T("Network Library=dbmssocn")
		, m_strID, m_strPW, m_strDBIP,
		m_strDBName, m_strDBIP, m_strPort);
}


bool CDBManager::GetFileInfo(CString strDevice_IP)
{
	//memset(m_Vci_Block,0x00,SIZE_VCI_BLOCK*10);

	bool bRet = true;
	CString sqlQuery;
	if (OpenDB() == FALSE) return FALSE;

	RecPtr pRS;
	pRS.CreateInstance(__uuidof(ADODB::Recordset));
	pRS->CursorType = ADODB::adOpenDynamic;

	variant_t filed_REAL_FILE_NAME;
	variant_t filed_FILE_SEQ;

	sqlQuery.Format("dbo.ECUSYNCSP_GET_UPDATEFILE(\'%s\')", strDevice_IP);
	memset(&mCurFileInfo, 0x00, sizeof(STRT_UPDATE_FILE_INFO));
	int nIndex = 0;
#ifdef CHKMEM_GetFileInfo_sub2
	try
	{
		pRS = m_pConn->Execute(sqlQuery.GetBuffer(0), NULL, ADODB::adCmdStoredProc);
		if (pRS->State == ADODB::adStateOpen && pRS->EndOfFile == false)
		{
			filed_REAL_FILE_NAME = pRS->Fields->GetItem("FILE_REALNAME")->GetValue();
			filed_FILE_SEQ = pRS->Fields->GetItem("FILE_SEQ")->GetValue();

			int nTmp = atoi((char*)(_bstr_t)filed_FILE_SEQ);
			if (filed_REAL_FILE_NAME.vt != VT_NULL)  strncpy(mCurFileInfo.FileName, (char*)((_bstr_t)filed_REAL_FILE_NAME), 50);
			if (filed_FILE_SEQ.vt != VT_NULL) mCurFileInfo.FileSeq = atoi((char*)(_bstr_t)filed_FILE_SEQ);
			
			U_SubLog("COMMON", (LPSTR)(LPCTSTR)strDevice_IP, "[GetCurrentWrkOrder]DB strFileName			 : %s", mCurFileInfo.FileName);
			U_SubLog("COMMON", (LPSTR)(LPCTSTR)strDevice_IP, "[GetCurrentWrkOrder]DB nFileSeq			 : %d", mCurFileInfo.FileSeq);
			m_strMessage.Format("FileName :  %s", mCurFileInfo.FileName);
			pRS->MoveNext();
			nIndex++;
		}
		if (nIndex == 0)
		{
			bRet = false;
			m_strMessage.Format("No FileInfo to Upload");
			U_SubLog("COMMON", (LPSTR)(LPCTSTR)strDevice_IP, "[%-30s] No Order Data !!!!!!!!!!!!!!!  Query : %s ", __FUNCTION__, sqlQuery);
		}
	}
	catch (_com_error &e)
	{
		_bstr_t bstrSource(e.Source());
		_bstr_t bstrDescription(e.Description());

		U_SubLog("COMMON", (LPSTR)(LPCTSTR)strDevice_IP, "[%-30s] Error code(%08lX), Meaning(%s), Src(%s), Dst(%s)", __FUNCTION__, e.Error(), e.ErrorMessage(), (LPCTSTR)bstrSource, (LPCTSTR)bstrDescription);
		U_SubLog("COMMON", (LPSTR)(LPCTSTR)strDevice_IP, "[%-30s] Query (%s)", __FUNCTION__, sqlQuery);
		U_Log("COMMON", "[%-30s] execute Query Failed : %s", __FUNCTION__, strDevice_IP);
		m_strMessage.Format("DB ERROR");
		bRet = false;
	}
	catch (...)
	{
		U_SubLog("COMMON", (LPSTR)(LPCTSTR)strDevice_IP, "[%-30s] Unhandled exception fired", __FUNCTION__);
		U_SubLog("COMMON", (LPSTR)(LPCTSTR)strDevice_IP, "[%-30s] Query (%s)", __FUNCTION__, sqlQuery);
		U_Log("COMMON", "[%-30s] execute Query Failed : %s", __FUNCTION__, strDevice_IP);
		bRet = false;
		m_strMessage.Format("DB ERROR");
	}

	if (pRS != NULL)
	{
		if (pRS->State == ADODB::adStateOpen)
			pRS->Close();
		pRS.Release();
	}
#endif
	CloseDB();

	return bRet;
}


bool CDBManager::SetFileUpResultInfo(CString strDevice_IP, int nFileSeq, char cResult)
{
	//memset(m_Vci_Block,0x00,SIZE_VCI_BLOCK*10);

	bool bRet = true;
	if (OpenDB() == FALSE) return FALSE;
	CString sqlQuery;

	//_RecordsetPtr pRS;
	//pRS.CreateInstance(__uuidof(Recordset));
	//pRS->CursorType = adOpenDynamic;


	sqlQuery.Format("dbo.ECUSYNCSP_SET_UPDATEHIST(\'%s\', %d, \'%c\')", strDevice_IP, nFileSeq, cResult);

	int nIndex = 0;
	try
	{
		m_pConn->Execute(sqlQuery.GetBuffer(0), NULL, ADODB::adCmdStoredProc);
		U_SubLog("COMMON", (LPSTR)(LPCTSTR)strDevice_IP, "[%-30s] File Result DB UPDATE OK : Query (%s)", __FUNCTION__, sqlQuery);
		bRet = true;
	}
	catch (_com_error &e)
	{
		_bstr_t bstrSource(e.Source());
		_bstr_t bstrDescription(e.Description());

		U_SubLog("COMMON", (LPSTR)(LPCTSTR)strDevice_IP, "[%-30s] Error code(%08lX), Meaning(%s), Src(%s), Dst(%s)", __FUNCTION__, e.Error(), e.ErrorMessage(), (LPCTSTR)bstrSource, (LPCTSTR)bstrDescription);
		U_SubLog("COMMON", (LPSTR)(LPCTSTR)strDevice_IP, "[%-30s] Query (%s)", __FUNCTION__, sqlQuery);
		U_Log("COMMON", "[%-30s] execute Query Failed : %s", __FUNCTION__, strDevice_IP);
		bRet = false;
		m_strMessage.Format("RESULT DB UPDATE FAIL");
	}
	catch (...)
	{
		U_SubLog("COMMON", (LPSTR)(LPCTSTR)strDevice_IP, "[%-30s] Unhandled exception fired", __FUNCTION__);
		U_SubLog("COMMON", (LPSTR)(LPCTSTR)strDevice_IP, "[%-30s] Query (%s)", __FUNCTION__, sqlQuery);
		U_Log("COMMON", "[%-30s] execute Query Failed : %s", __FUNCTION__, strDevice_IP);
		bRet = false;
		m_strMessage.Format("RESULT DB UPDATE FAIL");
	}
	
	CloseDB();
	sqlQuery = "";
	sqlQuery.ReleaseBuffer();
	return bRet;
}
